Index: app/src/main/java/com/focalstudio/focalhub/view/activities/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.focalstudio.focalhub.view.activities\r\n\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.focalstudio.focalhub.navigation.Navigation\r\nimport com.focalstudio.focalhub.utils.AppUsageMonitoringService\r\nimport com.focalstudio.focalhub.utils.FocalHubTheme\r\nimport com.focalstudio.focalhub.view.viewModel.HomeScreenViewModel\r\n\r\nclass MainActivity : ComponentActivity() {\r\n\r\n    private lateinit var viewModel: HomeScreenViewModel\r\n    private val TAG = \"MainActivityLifecycle\"\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        Log.d(TAG, \"onCreate\")\r\n        viewModel = ViewModelProvider(this).get(HomeScreenViewModel::class.java)\r\n\r\n        setContent {\r\n            FocalHubTheme {\r\n                Surface(modifier = Modifier.fillMaxSize()) {\r\n                    Navigation(lifecycleOwner = this@MainActivity)\r\n                }\r\n            }\r\n        }\r\n\r\n        // Start the background service\r\n        startService(Intent(this, AppUsageMonitoringService::class.java))\r\n    }\r\n    override fun onResume() {\r\n        super.onResume()\r\n        Log.d(TAG, \"onResume\")\r\n        viewModel.onResume()\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        Log.d(TAG, \"onPause\")\r\n        viewModel.onPause()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/focalstudio/focalhub/view/activities/MainActivity.kt b/app/src/main/java/com/focalstudio/focalhub/view/activities/MainActivity.kt
--- a/app/src/main/java/com/focalstudio/focalhub/view/activities/MainActivity.kt	
+++ b/app/src/main/java/com/focalstudio/focalhub/view/activities/MainActivity.kt	
@@ -24,7 +24,7 @@
     @RequiresApi(Build.VERSION_CODES.O)
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
-        Log.d(TAG, "onCreate")
+        //Log.d(TAG, "onCreate")
         viewModel = ViewModelProvider(this).get(HomeScreenViewModel::class.java)
 
         setContent {
Index: app/src/main/java/com/focalstudio/focalhub/view/composables/composables.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.compose.foundation.Image\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Checkbox\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextButton\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateListOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.painter.Painter\r\nimport androidx.compose.ui.platform.LocalSoftwareKeyboardController\r\nimport androidx.compose.ui.text.input.TextFieldValue\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.window.Dialog\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.chargemap.compose.numberpicker.NumberPicker\r\nimport com.focalstudio.focalhub.data.model.App\r\nimport com.focalstudio.focalhub.view.viewModel.AppUsageViewModel\r\nimport com.focalstudio.focalhub.view.viewModel.HomeScreenViewModel\r\nimport com.focalstudio.focalhub.view.viewModel.RulesManagerViewModel\r\nimport com.google.accompanist.drawablepainter.rememberDrawablePainter\r\nimport kotlinx.coroutines.launch\r\n\r\n\r\n@RequiresApi(Build.VERSION_CODES.O)\r\n@Composable\r\nfun AppSelectionDialog(\r\n    allApps: List<App>,\r\n    initialSelectedApps: List<String>,\r\n    onDismissRequest: () -> Unit,\r\n    onConfirm: (List<String>) -> Unit\r\n) {\r\n    val selectedApps = remember { mutableStateListOf<String>().apply { addAll(initialSelectedApps) } }\r\n    val searchQuery = remember { mutableStateOf(TextFieldValue()) }\r\n\r\n    Dialog(onDismissRequest = onDismissRequest) {\r\n        Surface(\r\n            modifier = Modifier.padding(vertical = 16.dp),\r\n            shape = MaterialTheme.shapes.medium\r\n        ) {\r\n            Column(modifier = Modifier.padding(16.dp)) {\r\n                TextField(\r\n                    value = searchQuery.value,\r\n                    onValueChange = { searchQuery.value = it },\r\n                    label = { Text(text = \"Search App\") },\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(bottom = 8.dp)\r\n                )\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n                LazyColumn(\r\n                    modifier = Modifier.weight(1f)\r\n                ) {\r\n                    val filteredApps: List<App> = allApps.filter { app ->\r\n                        app.name.contains(searchQuery.value.text, ignoreCase = true)\r\n                    }\r\n\r\n                    items(filteredApps.sortedBy { it.name }) { app ->\r\n                        AppItem(\r\n                            app = app,\r\n                            isSelected = selectedApps.contains(app.packageName),\r\n                            onSelect = {\r\n                                if (selectedApps.contains(app.packageName)) {\r\n                                    selectedApps.remove(app.packageName)\r\n                                } else {\r\n                                    selectedApps.add(app.packageName)\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n                Spacer(modifier = Modifier.height(6.dp))\r\n                Row(\r\n                    horizontalArrangement = Arrangement.End,\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .weight(0.1f)\r\n                ) {\r\n                    TextButton(onClick = onDismissRequest) {\r\n                        Text(\"Cancel\")\r\n                    }\r\n                    Spacer(modifier = Modifier.width(8.dp))\r\n                    TextButton(onClick = { onConfirm(selectedApps)\r\n                    }) {\r\n                        Text(\"Confirm\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@RequiresApi(Build.VERSION_CODES.O)\r\n@Composable\r\nfun RulesAppSelectionDialog(\r\n    viewModel: RulesManagerViewModel,\r\n    ruleId: Int,\r\n    onDismissRequest: () -> Unit,\r\n    onConfirm: (List<String>) -> Unit\r\n) {\r\n    val allApps by remember { viewModel.appsList }\r\n    val rule = viewModel.getRuleById(ruleId)\r\n    val initialSelectedApps = rule.appList ?: emptyList()\r\n\r\n    AppSelectionDialog(\r\n        allApps = allApps,\r\n        initialSelectedApps = initialSelectedApps,\r\n        onDismissRequest = onDismissRequest,\r\n        onConfirm = onConfirm\r\n    )\r\n}\r\n\r\n@RequiresApi(Build.VERSION_CODES.O)\r\n@Composable\r\nfun AppUsageSelectionDialog(\r\n    viewModel: AppUsageViewModel,\r\n    ruleId: Int,\r\n    onDismissRequest: () -> Unit,\r\n    onConfirm: (List<String>) -> Unit\r\n) {\r\n    val rule = viewModel.getUsageRuleById(ruleId)\r\n    var allApps by remember { mutableStateOf(emptyList<App>()) }\r\n\r\n    LaunchedEffect(rule) {\r\n        rule?.let {\r\n            val apps = viewModel.getAppsThatAreNotInOtherUsageRules(it)\r\n            allApps = apps\r\n        }\r\n    }\r\n\r\n    val initialSelectedApps = rule?.appList ?: emptyList()\r\n\r\n    AppSelectionDialog(\r\n        allApps = allApps,\r\n        initialSelectedApps = initialSelectedApps,\r\n        onDismissRequest = onDismissRequest,\r\n        onConfirm = onConfirm\r\n    )\r\n}\r\n\r\n\r\n@RequiresApi(Build.VERSION_CODES.O)\r\n@Composable\r\nfun AppSearchDialog(\r\n    viewModel: HomeScreenViewModel,\r\n    context: Context,\r\n    onDismissRequest: () -> Unit\r\n) {\r\n    val allApps by remember { viewModel.allAppsList }\r\n    val searchQuery = remember { mutableStateOf(TextFieldValue()) }\r\n    val keyboardController = LocalSoftwareKeyboardController.current\r\n\r\n    // Show the keyboard when the dialog is displayed\r\n    DisposableEffect(Unit) {\r\n        keyboardController?.show()\r\n        onDispose {\r\n            keyboardController?.hide()\r\n        }\r\n    }\r\n\r\n    Dialog(onDismissRequest = onDismissRequest) {\r\n        Surface(\r\n            modifier = Modifier\r\n                .padding(vertical = 16.dp)\r\n                ,\r\n            shape = MaterialTheme.shapes.large\r\n        ) {\r\n            Column(modifier = Modifier.padding(16.dp)) {\r\n                TextField(\r\n                    value = searchQuery.value,\r\n                    onValueChange = { searchQuery.value = it },\r\n                    label = { Text(text = \"Search App\") },\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .padding(bottom = 8.dp),\r\n                )\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n                LazyColumn(\r\n                    modifier = Modifier.weight(1f)\r\n                ) {\r\n                    val filteredApps: List<App> = allApps.filter { app ->\r\n                        app.name.contains(searchQuery.value.text, ignoreCase = true)\r\n                    }\r\n\r\n                    if (searchQuery.value.text.isNotEmpty()) {\r\n                        items(filteredApps.sortedBy { it.name }) { app ->\r\n                            SearchAppItem(app, context, viewModel)\r\n                        }\r\n                    }\r\n                }\r\n                Spacer(modifier = Modifier.height(6.dp))\r\n                Row(\r\n                    horizontalArrangement = Arrangement.End,\r\n                    modifier = Modifier\r\n                        .fillMaxWidth()\r\n                        .weight(0.1f)\r\n                ) {\r\n                    TextButton(onClick = onDismissRequest) {\r\n                        Text(\"Cancel\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@RequiresApi(Build.VERSION_CODES.O)\r\n@Composable\r\nfun SearchAppItem(app: App, context: Context, viewModel: HomeScreenViewModel) {\r\n\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable(\r\n                onClick = {\r\n                    viewModel.viewModelScope.launch {\r\n                        viewModel.appIconClicked(app, context)\r\n                    }\r\n                }\r\n            )\r\n            .padding(8.dp),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        val painter: Painter = rememberDrawablePainter(drawable = app.icon)\r\n        Image(\r\n            painter = painter,\r\n            contentDescription = app.name,\r\n            modifier = Modifier\r\n                .size(46.dp)\r\n                .background(color = Color.White, shape = CircleShape) // For ripple effect\r\n                .padding(0.dp)\r\n        )\r\n        Spacer(modifier = Modifier.width(8.dp))\r\n        Text(app.name)\r\n    }\r\n}\r\n@Composable\r\nfun AppItem(app: App, isSelected: Boolean, onSelect: () -> Unit) {\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .clickable { onSelect() }\r\n            .padding(8.dp),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        Checkbox(\r\n            checked = isSelected,\r\n            onCheckedChange = { onSelect() }\r\n        )\r\n        Spacer(modifier = Modifier.width(8.dp))\r\n        Text(app.name)\r\n    }\r\n}\r\n\r\n@Composable\r\nfun NumberPickerDialog(\r\n    range: IntRange,\r\n    pickerValue: Int,\r\n    onValueChange: (Int) -> Unit,\r\n    onConfirm: () -> Unit,\r\n    onDismiss: () -> Unit\r\n) {\r\n    var currentValue by remember { mutableStateOf(pickerValue) }\r\n\r\n    Dialog(onDismissRequest = onDismiss) {\r\n        Surface(\r\n            shape = MaterialTheme.shapes.medium,\r\n            modifier = Modifier.padding(vertical = 16.dp)\r\n\r\n        ) {\r\n            Column(\r\n                modifier = Modifier.padding(16.dp),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(text = \"Set maximum usage duration in minutes\")\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                NumberPicker(\r\n                    value = currentValue,\r\n                    range = range,\r\n                    onValueChange = {\r\n                        currentValue = it\r\n                    }\r\n                )\r\n\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n\r\n                Row(\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    horizontalArrangement = Arrangement.SpaceEvenly\r\n                ) {\r\n                    Button(onClick = onDismiss) {\r\n                        Text(\"Dismiss\")\r\n                    }\r\n                    Button(onClick = {\r\n                        onValueChange(currentValue)\r\n                        onConfirm()\r\n                    }) {\r\n                        Text(\"Confirm\")\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/focalstudio/focalhub/view/composables/composables.kt b/app/src/main/java/com/focalstudio/focalhub/view/composables/composables.kt
--- a/app/src/main/java/com/focalstudio/focalhub/view/composables/composables.kt	
+++ b/app/src/main/java/com/focalstudio/focalhub/view/composables/composables.kt	
@@ -1,6 +1,7 @@
 
 import android.content.Context
 import android.os.Build
+import android.widget.NumberPicker
 import androidx.annotation.RequiresApi
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
Index: app/src/main/java/com/focalstudio/focalhub/utils/UiTheme/Theme.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.focalstudio.focalhub.utils.UiTheme\r\n\r\nimport android.app.Activity\r\nimport android.os.Build\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.darkColorScheme\r\nimport androidx.compose.material3.dynamicDarkColorScheme\r\nimport androidx.compose.material3.dynamicLightColorScheme\r\nimport androidx.compose.material3.lightColorScheme\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.SideEffect\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.toArgb\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalView\r\nimport androidx.core.view.WindowCompat\r\nimport com.focalstudio.focalhub.view.activities.MainActivity\r\n\r\nprivate val DarkColorScheme = darkColorScheme(\r\n    primary = Indigo500,\r\n    secondary = Pink200,\r\n    tertiary = Indigo100\r\n)\r\n\r\nprivate val LightColorScheme = lightColorScheme(\r\n    primary = Indigo500,\r\n    secondary = Pink200,\r\n    tertiary = Indigo100\r\n)\r\n\r\n@Composable\r\nfun MainActivity  (\r\n    darkTheme: Boolean = isSystemInDarkTheme(),\r\n    // Dynamic color is available on Android 12+\r\n    dynamicColor: Boolean = true,\r\n    content: @Composable () -> Unit\r\n) {\r\n    val colorScheme = when {\r\n        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {\r\n            val context = LocalContext.current\r\n            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)\r\n        }\r\n\r\n        darkTheme -> DarkColorScheme\r\n        else -> LightColorScheme\r\n    }\r\n    val view = LocalView.current\r\n    if (!view.isInEditMode) {\r\n        SideEffect {\r\n            val window = (view.context as Activity).window\r\n            //window.statusBarColor = colorScheme.primary.toArgb()\r\n            window.statusBarColor = Color.DarkGray.toArgb()\r\n            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme\r\n        }\r\n    }\r\n\r\n    MaterialTheme(\r\n        colorScheme = colorScheme,\r\n        typography = Typography,\r\n        content = content\r\n    )\r\n}
===================================================================
diff --git a/app/src/main/java/com/focalstudio/focalhub/utils/UiTheme/Theme.kt b/app/src/main/java/com/focalstudio/focalhub/utils/UiTheme/Theme.kt
--- a/app/src/main/java/com/focalstudio/focalhub/utils/UiTheme/Theme.kt	
+++ b/app/src/main/java/com/focalstudio/focalhub/utils/UiTheme/Theme.kt	
@@ -30,7 +30,7 @@
 )
 
 @Composable
-fun MainActivity  (
+fun FocalHubTheme  (
     darkTheme: Boolean = isSystemInDarkTheme(),
     // Dynamic color is available on Android 12+
     dynamicColor: Boolean = true,
